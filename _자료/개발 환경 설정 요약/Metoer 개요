
http://webframeworks.kr/getstarted/meteorjs/

------------------------
### 기본폴더구조
------------------------

/client
client 폴더 안의 파일들은 오로지 브라우저에서만 실행될 코드이다.
lib 폴더에서 if(Meteor.isClient){ … } 구문으로 작성된 코드들과 동작 위치가 같다.

/lib
이 폴더안의 파일들은 서버와 클라이언트 모두 동작한다.
따라서 각종 js 유틸이라던가 collection정의된 파일 또는 공통 method 들을 작성하여 저장한다.
이 폴더안에 자바스크립트 코드들은 Meteor.isClient , Meteor.isServer를 이용하여 동작하는 곳이 어딘가를 알수 있다.
따라서 구동위치에 따라 다른 동작의 코드를 작성 할 수 있다.
(주의할 점) client 나 server 양쪽 환경 모두에서 이용 가능하다는 점에 유의해야 한다.

/private
서버쪽에서만 사용될 리소스들을 넣어둘수 있다. Assets API 를 통하여 서버쪽에서만 접근 할 수 있다.

/public
public 폴더는 미티어가 웹서버가 되어 정적 리소스를 서비스 하는 폴더이다.
루트 패스 “/” 로 서비스 한다. 가령 public 폴더 안에 images 폴더를 생성할 경우 “/images” 경로로 서비스 한다.
favicon.ico , robots.txt 화일들을 위치하는데 적합하다.
따라서 미티어 프로젝트이전에 서비스 하였던 기본 html 들이나 rest 서비스만 있으면 동작하는 angularjs 또는 jQuery 프로젝트들을 정상 구동 실수 있다.

/server
폴더이름 그대로, 서버에서 구동될 코드들이 위치할 폴더이다.
서버측 프로그램들이 위치 하여야한다.
Publish 가 선언된 서버측 파일이나 서버에서 구동되는 method 등이 위치한다.
lib 폴더에서 if(Meteor.isServer){ … } 구문으로 작성된 코드들과 동작 위치가 같다.

※ CSS 파일 저장
Meteor가 CSS를 자동으로 로드하고 최적화하므로, 다른 정적 자원들과는 다르게 /public 디렉토리가 아닌 /client 디렉토리에 넣는다.
client/stylesheets/ 디렉토리를 만들고, style.css 파일을 넣었다.

* 코드 실행에 있어 디렉토리 규칙 정리
- 서버에서만 실행되는 코드는 "/server" 디렉토리에 넣는다.
- 클라이언트에서만 실행되는 코드는 "/client" 디렉토리에 넣는다.
- 그 밖의 모든 것은 클라이언트와 서버 양쪽 모두에서 실행된다.
- 정적 자원들(fonts, images 등)은 "/public" 디렉토리에 넣는다.
- server 쪽의 assets는 "/private" 디렉토리에 넣는다.

------------------------
* 기타
------------------------

- .meteor
Meteor 프레임워크의 코어와 npm packages가 아닌 Meteor Packages를 관리하는 디렉토리
- node_modules
npm dependenices가 저장된, 즉 npm으로 관리하는 node.js 관련 모듈이 저장된 디렉토리
- package.json
npm dependecies를 관리하기 위한 일종의 setting 값이 저장된 문서

npm packages가 의미하는 건 npm으로 관리가 가능한 패키지들을 이야기 한다.
이 패키지들은 다음 명령어로 설치가 가능하다.
> npm install --save react react-dom

반면에 Meteor packages가 의미하는 것은 meteor 명령어로 관리하는 패키지이다. 
이 패키지들은 다음 명령어로 설치한다.
> meteor add react-meteor-data

사실 npm 패키지들도 다음 명령어처럼 meteor를 사용하긴 한다.
> meteor npm install --save react react-dom

------------------------
### 로딩순서
------------------------

개발시에 순서에 민감한 코드들은 packages 를 작성하거나 Meteor.startup 함수를 이용할 것을 추천한다.
이렇게 작성된 코드들은 meteor 가 의존성 및 민감성 관리를 해준다.
따라서 미티어를 사용하는 개발자들은 grunt.js 같은 의존성 관리 패키지들을 별도로 사용 할 필요가 없다.
미티어가 파일을 로딩하는 순서는 다음과 같다.

1. 하위디렉토리 파일을 먼저 로딩한다. 따라서 루트는 가장 마지막에 로딩된다.
2. 같은 위치의 파일과 폴더는 alphabetical order 를 따른다.
3. lib 폴더는 우선 로딩된다. 라이브러리에 해당하는 자바스크립트코드들은 꼭 lib 폴더에 넣는다.
4. main.* 파일은 제일 마지막에 로딩된다.

* Meteor가 파일을 로드하는 순서 정리
- "/lib" 디렉토리에 있는 파일들은 그 밖의 모든 파일들보다 먼저 Load 된다.
- "main.*" 의 이름을 가진 파일들은 그 밖의 다른 파일들보다 나중에 Load 된다.
- 그 밖의 모든 파일들은 파일명의 알파벳 순으로 로드된다. 
※ 참고 : http://docs.meteor.com/#/full/structuringyourapp

------------------------
### 템플릿 (Template)
------------------------

미티어의 프론트 엔드 프레임워크인 Blaze 는 Spacebar 라는 템필리팅 엔진을 사용, 개발자들이 ui 를 작성 할수 있도록 개발 방법을 제공한다.
Blaze는 Angular, React 등으로 교체할 수 있다.

- 컬렉션 (Collection)
미티어의 내장 데이터베이스인 몽고디비를 다루기 위한 필수 오브젝트가 미티어 컬렉션이다.
DB = new Mongo.Collection("friends");
DB.insert({no: 2, name: "카라", email: "kara@gmail.com"});
var list = DB.find({} , { sort : {no:-1} });
DB.remove({_id:this._id});

------------------------
### 발행(Publish)과 구독(Subscribe)
------------------------

* Meteor에서의 var 키워드
미티어에서 var 키워드는 해당 객체의 영역(scope)을 현재 파일로 제한한다.
앱 전체에서 해당 Collection을 사용하고 싶다면 위의 코드와 같이 var 키워드를 사용하지 않고 변수를 정의해줘야 한다.

*  Autopublish
이 패키지는 각 컬렉션마다 연결된 각 클라이언트와 전체 데이터를 공유하게 한다.
이는 Meteor에서 기본으로 실행되고 있다. 개발할 때는 편리하나, 실제 서비스에서는 적합하지 않으므로 기능을 꺼야 한다.
> meteor remove autopublish

- 발행 구독의 원리
미티어는 서버측 데이터베이스로 몽고디비를 기본으로 사용한다.
최근에는 postgreSQL이나 mysql도 사용 가능하다.
반면 클라이언트는 미니몽고라고하는 작은 몽고디비가 있으며 우리가 사용하는 미티어컬렉션 오브젝트로 대부분의 질의가 가능하다.
이것은 서버와 클라이언트간 발행/구독을 통하여 서버측의 데이터 일부분을 클라이언트로 내려 주고 변경분을 sync 하기 때문이다.

하지만 우리는 한번도 발행/구독 코드를 작성한 적이 없었다. 이것은 autopublish 라고 하는 기본 패키지가 설치 되어 있었기 때문이다.
하지만 이 패키지는 위험하기 짝이 없다. 서버에 있는 모든 컬렉션의 모든 다큐먼트(데이터)를 브라우저로 내려보내주기 때문이다.
그래서 MDG(meteor developer group) 에서도 프로토 타이핑용이라고 말하고 있다.

지금부터 autopublish 패키지를 삭제 하고 발행/구독을 구현해보자.

// 현재 프로젝트에 설치되어있는 패키지들을 확인
> meteor list
// autopublish 패키지 삭제
> meteor remove autopublish
--> 이제 템플릿에서 mongoDB 데이터에 접근할 수 없음

- 발행구독 구현하기
publish() 함수는 서버 쪽 Collection의 데이터 변경이 이루어지면 해당 Collection을 참조하는 클라이언트에게 해당 데이터가 변경되었다고 공지해준다.
두 번째 인자 콜백 함수에 내용을 지정하여 클라이언트 쪽에게 어떤 정보를 반환할지 결정할 수 있다.
발행 코드를 다음과 같이 작성 한다. (서버측)
Meteor.publish("friendsList",function(findOptopn){
    var condition = findOptopn || {};
    return Friends.find(condition);
});

클라이언트 쪽에서 구독하는 코드를 작성한다.
클라이언트에서 위에 정의한 발행(publication)을 구독(subscribe)해야 한다.
subscribe 함수는 Meteor.subscribe 함수와 동일하다.
Template.friendsList.onCreated(function () {
    var findOptopn = {};
    this.subscribe("friendsList",findOptopn);
});

onCreated 는 템플릿 인스턴스가 생성되는 시점에 한번 호출되는 함수 이다.
이것으로 인하여 friendsList 템플릿이 파괴될때까지 서버로 부터 지속적으로 데이터의 변경사항을 주고 받는다.

만약 onCreated 시에 Meteor 오브젝트의 subscribe 를 사용하면 onDestoryed에서 구독을 중지 하여야한다.
subscribe 함수가 구독 핸들러를 리턴하므로 구독 핸들러에 있는 stop 함수를 이용하여 구독을 중지 하여 주면 된다.
하지만, 템플릿내부에 있는 subscribe 함수를 사용하면 별도로 stop 을 해줄 필요가 없다.

------------------------
클라이언트와 서버
------------------------
/client 나 /server 가 아닌 폴더에 존재하는 코드는 양쪽에서 실행된다.
각 환경에서 Collection이 동작하는 방식은 완전히 다르다.

- 서버에서의 Collection
MongoDB 데이터베이스와 연결되어 데이터 입출력을 처리한다. 이것은 표준 데이터베이스 라이브러리와 비교할 수 있다.
Collection은 MongoDB API로 기능한다.
서버쪽 코드를 작성할 때, Posts.insert(), Posts.update() 와 같은 Mongo 명령어를 쓸 수 있고, 이들은 Mongo에 저장된 posts 컬렉션을 변경한다.

- 클라이언트에서의 Collection
실제 정통(canonical)의 부분집합의 복제본이다.
클라이언트에서의 Collection은 그 부분집합을 지속적으로 그리고 명백하게 최신 상태로 실시간으로 유지한다.

클라이언트에서 "Posts = new Mongo.Collection('posts');" 라고 선언하는 것은 실제 Mongo Collection의 로컬, 즉 인-브라우저 캐시를 생성하는 것이다.
"캐시" 는 데이터의 부분 집합을 가지며, 데이터에 빠르게 접근할 수 있다는 것을 말한다. 이것이 미티어가 작동하는 방식의 기본이다.
클라이언트에서의 Collection은 Mongo Collection에 저장된 전체 Documents의 부분집합이다.
이 브라우저 캐시인 Documents들은 브라우저 메모리에 저장되며, 클라이언트에서 Posts.find()를 호출할 때, 데이터를 가져오기 위해 서버나 데이터베이스에 느리게 갔다오는 일이 없다.
왜냐하면, 데이터가 이미 로드되어 있기 때문이다.

* 클라이언트-서버 통신
클라이언트의 Collection이 같은 이름의 서버 Collection과 동기화된다.
- 작동 방식
1) 브라우저 콘솔1의 Collection이 서버쪽 Collection에게 데이터 insert 요청한다.
2) 해당 데이터를 실제 MongoDB에 삽입한다.
3) 연결된 모든 다른 클라이언트쪽 Collection(브라우저 콘솔2)에게 알려준다.
4) 브라우저는 같은 데이터를 동기화 한다.

------------------------
터미널 vs 브라우저 콘솔 vs Mongo 쉘
------------------------

- 터미널
운영체제에서 구동되며, 서버에서 "console.log()" 를 호출하면 여기로 출력된다.
Shell 또는 Bash라고 불리기도 한다.

- 브라우저 콘솔
브라우저 내부에서 구동되어 JavaScript 코드를 실행한다.
클라이언트에서의 "console.log()" 를 호출하면 여기로 출력된다.

- Mongo 쉘
터미널에서 meteor mongo 명령어를 실행하여 구동된다.
앱의 데이터베이스에 직접 접속하며, Mongo Console이라고 불리기도 한다.

------------------------
Meteor에서의 데이터 저장
------------------------

웹 앱은 데이터 처리에 있어 3가지 기본 방식을 가지고 있다.
미티어에서는 아래 3가지 기본 방식을 모두 사용하며, 때로는 한 장소에서 다른 곳으로 데이터를 동기화한다.
즉, 데이터베이스는 데이터 원본을 저장하는 "정통(canonical)" data source로 존재한다.

- 브라우저 메모리
JavaScript 변수같은 것들은 브라우저 메모리에 저장된다.
메모리이기 때문에 영구적이지 않으며, 이것은 현재 브라우저 탭에 한정되며, 탭을 닫는 순간 사라진다.

- 브라우저 저장소(storage)
브라우저는 데이터를 "쿠키"나 "Local Storage"에 보다 영구적으로 저장할 수 있다.
이곳에 저장된 데이터는 Session 한계를 넘어서 저장할 수 있지만, 현재 사용자에 한정(브라우저 탭의 한계는 벗어난다)되며 다른 사용자들과 쉽게 공유하지 못한다.

- 서버 데이터베이스
영구적으로 데이터를 저장하는 최상의 장소다.
한 사용자에만 한정되지 않고 이용할 수 있는 곳은 전통적인 데이터베이스(미티어 앱의 기본 솔루션인 MongoDB)이다.

------------------------
라우팅(Routing)
------------------------

- 루트(Routes)
루트는 라우팅의 기본 구축 블록이다. 이것은 앱에게 어디로 갈지 그리고 URL을 만나면 무엇을 할 지를 지시하는 지침의 집합이다.

- 경로(Paths)
경로는 앱에 있는 URL이다. 이것은 정적(｀/termsofservice｀)일 수도 있고, 동적(｀/posts/xyz｀)일 수도 있으며, 쿼리 매개변수(｀/search?keyword=meteor｀)를 담을 수도 있다.

- 세그먼트(Segments）
슬래시 문자(｀/｀)로 구분되는 경로의 일부를 의미한다.

- 후크(Hooks)
후크는 라우팅 프로세스의 전, 후 또는 그 프로세스 중간에 실행될 수 있는 동작이다.
전형적인 예제로는 페이지를 보여주기 전에 사용자가 적절한 권한을 가지고 있는지 확인하는 것이 있다.

- 필터(Filters)
필터는 하나 이상의 루트에서 전역적으로 정의하는 단순한 hook이다.

- 루트 템플릿(Route Templates)
각 루트는 템플릿을 지정해야 한다. 만약 템플릿을 지정하지 않으면, 라우터는 루트와 이름이 같은 템플릿을 찾는다.

- 레이아웃(Layouts)
레이아웃은 디지털 사진 프레임의 하나로 생각할 수 있다.
레이아웃은 현재의 템플릿을 감싸는 모든 HTML 코드를 포함하며, 템플릿이 변경되어도 현재 상태를 유지한다.

- 컨트롤러(Controllers)
때때로, 많은 템플릿이 동일한 매개변수를 재사용하는 것을 볼 수 있다.
이 경우에 코드를 반복하는 대신에, 이런 루트들마다 라우팅 로직 전체를 담고 있는 하나의 routing controller에서 상속받아 구현하게 할 수 있다.

------------------------
배포
------------------------

* Meteor에 배포하기
미티어 서브도메인 http://myapp.meteor.com 에 배포하는 것이 가장 쉬운 선택이다.
이곳은 초기에 앱을 시연하거나, 또는 스테이징 서버를 신속히 설치하기에 유용하다.
> meteor deploy [앱이름].meteor.com

위에서 [앱이름]은 이미 사용되지 않은 이름이어야 한다.
처음 앱을 배포하는 경우 Meteor 계정을 생성하라는 메시지가 나타난다.
모든 것이 잘 진행되면, http://[앱이름].meteor.com에서 앱에 접속할 수 있다.

참고) 호스트 인스턴스의 DB에 접속하거나 직접 접속하거나 앱의 도메인을 커스텀 도메인으로 설정
- http://docs.meteor.com/#/full/deploying

- [앱이름].meteor.com 에서의 Mongo 쉘 구동 방법
> meteor mongo [앱이름]

- [앱이름].meteor.com에서의 앱 로그 파일 보기
> meteor logs [앱이름]










